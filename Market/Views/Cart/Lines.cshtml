@using System.Globalization
@model string

<div id="cart" style="padding-top: 10px">
    <cart v-cloak inline-template>
        <div>
            <div class="row">
                <div class="col-md-12">
                    <p v-if="lines.length < 1 && uploaded"><big><b>Your cart is empty :(</b></big></p>
                    <div class="btn-group pull-right">
                        <a v-if="canContinue" :href="returnUrl" class="btn btn-primary">Back</a>
                        <button v-if="lines.length > 0" class="btn btn-danger" v-on:click.prevent="clearCartRequest">Clear cart</button>
                    </div>
                </div>
            </div>
            <div class="row product-item" v-bind:key="line.id" v-for="(line, index) in lines">
                <div class="col-md-2">
                    <a :href="getProductUrl(index)">
                        <img :src="line.image" style="max-height: 150px" />
                    </a>
                </div>
                <div class="col-md-4">
                    <p><b>Name</b> {{line.name}}</p>
                    <p><b>Brand</b> {{line.brand}}</p>
                    <p><b>Country</b> {{line.country}}</p>
                </div>
                <div class="col-md-4">
                    <p><b>Weight</b> {{line.weight}} kg</p>
                    <p><b>Price</b> {{line.price}} @CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol</p>
                    <p><b>Total price</b> {{line.totalPrice}} @CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol</p>
                </div>
                <div class="col-md-2">
                    <div class="pull-right">
                        <p><b>Quantity</b> {{line.quantity}}</p>
                        <div class="btn-group pull-right">
                            <button class="btn btn-success" v-on:click="changeLine(index, 'add')">+</button>
                            <button class="btn btn-primary" v-on:click="changeLine(index, 'remove')">-</button>
                            <button class="btn btn-danger" v-on:click="removeFromCart(index)">&times;</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </cart>
</div>

@section Sweetalert {
    @{ await Html.RenderPartialAsync("_SweetalertPartial"); }
}

<script type="text/javascript">
    Vue.component("cart", {
        data: function () {
            return {
                lines: [],
                returnUrl: "@Model",
                productUrl: "@Url.Action("Product", "Catalog")",
                uploaded: false
            }
        },
        computed: {
            canContinue: function () {
                return this.returnUrl !== null && this.returnUrl !== '' ? true : false;
            }
        },
        methods: {
            clearCartRequest: function () {
                let clear = async () => await this.clearCart();

                swal({
                    title: "Attention",
                    text: "Do you really want to clear cart?",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: "btn-danger",
                    confirmButtonText: "Yes",
                    cancelButtonText: "No"
                },
                async function (isConfirm) {
                    if (isConfirm) {
                        await clear();
                    }
                });
            },
            clearCart: async function () {
                await fetch("/../api/cart", {
                    mode: "cors",
                    method: "DELETE",
                    credentials: "same-origin"
                });
                this.lines = [];
            },
            changeLine: async function (index, operation) {
                if (operation !== "add" && operation !== "remove") {
                    return;
                }

                if (this.lines[index] === null) {
                    this.lines.splice(index, 1);
                    return;
                }

                let response = await fetch("/../api/cart", {
                    mode: "cors",
                    method: "POST",
                    headers: {
                        "Content-type": "application/json",
                        'Access-Control-Request-Headers': 'Location'
                    },
                    credentials: "same-origin",
                    body: JSON.stringify({
                        id: this.lines[index].id,
                        quantity: 1,
                        operation: operation
                    })
                });

                if (response.status === 400) {
                    let text = await response.text();

                    if (text !== "Cart is empty") {
                        return;
                    }

                    await clearCart();
                    swal({
                        title: "Warning",
                        text: text,
                        type: "warning"
                    });
                    return;
                }

                if (response.status === 500) {
                    this.lines.splice(index, 1);
                    let text = operation === "add"
                        ? "Failed to add product in cart"
                        : "Failed remove product from cart";
                    swal({
                        title: "Error",
                        text: text,
                        type: "error"
                    });
                    return;
                }

                if (response.status === 404) {
                    let text = await response.text();

                    if (text === "Product not found" || text === "Product not found in cart") {
                        this.lines.splice(index, 1);
                        swal({
                            title: "Warning",
                            text: text,
                            type: "warning"
                        });
                        return;
                    }

                    await clearCart();
                    swal({
                        title: "Error",
                        text: text,
                        type: "error"
                    });
                    return;
                }

                if (!response.ok) {
                    await clearCart();
                    swal({
                        title: "Error",
                        text: "An error occurred",
                        type: "error"
                    });
                    return;
                }

                let location = response.headers.get("location");
                let id = (await response.json()).id;
                let result = await fetch(`${location}/${id}`, {
                    mode: "cors",
                    method: "GET",
                    credentials: "same-origin"
                });

                if (result.status === 404) {
                    this.lines.splice(index, 1);
                    swal({
                        title: "Warning",
                        text: await result.text(),
                        type: "watning"
                    });
                    return;
                }

                if (!result.ok) {
                    await clearCart();
                    swal({
                        title: "Error",
                        text: "An error occurred",
                        type: "error"
                    });
                    return;
                }

                let line = await result.json();
                this.$set(this.lines, index, line);
            },
            removeFromCart: async function (index) {
                if (this.lines[index] === null) {
                    this.lines.splice(index, 1);
                    return;
                }

                let id = this.lines[index].id;
                let response = await fetch(`/../api/cart/${id}`, {
                    method: "DELETE",
                    mode: "cors",
                    credentials: "same-origin"
                });

                if (!response.ok) {
                    await clearCart();
                    let text = await response.text();
                    swal({
                        title: "Error",
                        text: text,
                        type: "error"
                    });
                }

                this.lines.splice(index, 1);
            },
            getProductUrl: function (index) {
                if (this.lines[index] === null) {
                    this.lines.splice(index, 1);
                    return;
                }

                return this.productUrl + "/" + this.lines[index].id;
            }
        },
        created: async function () {
            let response = await fetch("/../api/cart", {
                mode: "cors",
                method: "GET",
                credentials: "same-origin"
            });
            this.lines = await response.json();
            this.uploaded = true;
        },
        watch: {
            lines: function (val) {
                eventBus.$emit("onChangeLines", val);
            }
        }
    });

    var cart = new Vue({ el: "#cart" });
</script>